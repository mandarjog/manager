// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

package istio.proxy.v1alpha.config;
option go_package = "config";

// Glossary & concepts
//
// Service is a unit of an application with a unique name that other services
// use to refer to the functionality being called. Service instances are
// pods/VMs/containers that implement the service.
//
// Service versions - In a continuous deployment scenario, for a given service,
// there can be multiple sets of instances running potentially different
// variants of the application binary. These variants are not necessarily
// different API versions. They could be iterative changes to the same service,
// deployed in different environments (prod, staging, dev, etc.). Common
// scenarios where this occurs include A/B testing, canary rollouts, etc. The
// choice of a particular version can be decided based on various criterion
// (headers, url, etc.) and/or by weights assigned to each version.  Each
// service has a default version consisting of all its instances.
//
// Source - downstream client (browser or another service) calling the
// proxy/sidecar (typically to reach another service).
//
// Destination - The remote upstream service to which the proxy/sidecar is
// talking to, on behalf of the source service. There can be one or more
// service versions for a given service (see the discussion on versions above).
// The proxy would choose the version based on various routing rules.
//
// Applications address only the destination service without knowledge of
// individual service versions. The actual choice of the version is determined
// by the proxy, enabling the application code to decouple itself from the
// evolution of dependent services.

// Proxy level global configurations go here
message ProxyMeshConfig {
}

// Destination declares policies that determine how to handle traffic for a
// destination service (load balancing policies, failure recovery policies such
// as timeouts, retries, circuit breakers, etc).  Policies are applicable per
// individual service versions. It is an error to define multiple policies for
// the same service version.
//
// N.B. The policies are enforced on client-side connections or requests, i.e.,
// enforced when the service is opening a connection/sending a request via the
// proxy to the destination.
message Destination {
  // Service name for which the service version is defined.
  // The name should be fully-qualified, e.g. "my-service.default.svc.cluster.local".
  string destination = 1;

  // Service version destination identifier for the destination service.
  // The identifier is qualified by the destination service name, e.g. version
  // "env=prod" in "my-service.default.svc.cluster.local".
  //
  // N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208)
  map<string, string> version = 2;

  // Load balancing policy
  LoadBalancing load_balancing = 3;

  // Circuit breaker policy
  CircuitBreaker circuit_breaker = 4;

  // Timeout policy. N.B. Applicable to the default service version only.
  HTTPTimeout http_timeout = 5;

  // Retry policy. N.B. Applicable to the default service version only.
  HTTPRetry http_retry = 6;

  // L7 fault injection policy applies to L7 traffic
  HTTPFaultInjection http_fault = 7;

  // L4 fault injection policy applies to L4 traffic
  L4FaultInjection l4_fault = 8;

  // Custom policy implementations
  google.protobuf.Any custom = 9;
}

// Route rule provides a custom routing policy based on the source and
// destination service versions and connection/request metadata.  The rule must
// provide a set of conditions for each protocol (TCP, UDP, HTTP) that the
// destination service exposes on its ports. The rule applies only to the ports
// on the destination service for which it provides protocol-specific match
// condition, e.g. if the rule does not specify TCP condition, the rule does
// not apply to TCP traffic towards the destination service.
message RouteRule {
  // Uniquely identifies the destination  associated with this routing rule.
  // This is applicable for hostname-based resolution for HTTP traffic as well as
  // IP-based resolution for TCP/UDP traffic.
  //
  // The value is either the fully qualified service name or the cluster subdomain
  // with the interpretation that the cluster route rule applies to its ingress traffic.
  // For example, "my-service.default.svc.cluster.local" refers to a service by its
  // name, while "svc.cluster.local" refers to the cluster ingress traffic.
  //
  // The destination field is mandatory for each route rule.
  //
  // Examples: "my-service.default.svc.cluster.local", "svc.cluster.local".
  string destination = 1;

  // Match condition is optional.
  // By default, the rule applies to HTTP traffic only.
  MatchCondition match = 2;

  // Each routing rule is associated with one or more service version destinations
  // (see glossary in beginning of document). Weights associated with the service
  // version determine the proportion of traffic it receives.
  repeated DestinationWeight route = 3;

  // Precedence is used to disambiguate the order of application of rules for
  // the same destination service. A higher number takes priority.  If not
  // specified, the value is assumed to be 0.  The order of application for rules
  // with the same precedence is unspecified.
  //
  // Rule precedence can be used to order routes for a single destination, as
  // well as override existing routes with the same attribute condition.
  int32 precedence = 4;
}

// Match condition selects traffic for routing application.
// The condition provides distinct set of conditions for each protocol with the
// intention that conditions apply only to the service ports that match the protocol.
message MatchCondition {
  // Identifies the service initiating a connection or a request by its name.
  string source = 1;

  // Identifies the source service version. The identifier is interpreted
  // by the platform to match a service version for the source service.
  //
  // N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208)
  map<string, string> source_version = 2;

  // Set of layer 4 match conditions based on the IP ranges
  L4MatchAttributes tcp = 3;

  // Set of layer 4 match conditions based on the IP ranges
  L4MatchAttributes udp = 4;

  // Set of HTTP match conditions based on HTTP/1.1, HTTP/2, GRPC request metadata,
  // such as "uri", "scheme", "authority".
  // The header keys are case-insensitive.
  map<string, StringMatch> http = 5;
}

// Each routing rule is associated with one or more service versions (see
// glossary in beginning of document). Weights associated with the version
// determine the proportion of traffic it receives.
message DestinationWeight {
  // Uniquely identifies the destination service.
  // If not specified, the value is inherited from the parent route rule.
  //
  // Example: "my-service.default.svc.cluster.local".
  string destination = 1;

  // Service version identifier for the destination service.
  //
  // N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208)
  map<string, string> version = 2;

  // The proportion of traffic to be forwarded to the service version Max is
  // 100. Sum of weights across destinations should add up to 100.
  // If there is only destination in a rule, the weight value is assumed to be 100.
  int32 weight = 3;
}

// L4 connection match attributes
message L4MatchAttributes {
  // IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
  // just a.b.c.d
  repeated string source_subnet = 1;

  // IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
  // just a.b.c.d
  repeated string destination_subnet = 2;
}

// Describes how to matches a given string (exact match, prefix-based match
// or posix style regex based match). Match is case-sensitive.
// It is a validation error to supply a regex for a proxy that does not support it.
message StringMatch {
  oneof match_type {
    string exact = 1;
    string prefix = 2;
    string regex = 3;
  }
}

// Load balancing policy to use when forwarding traffic.
message LoadBalancing {
  enum SimpleLBPolicy {
    // These four simple load balancing policies have literally no
    // additional configuration.
    ROUND_ROBIN = 0;
    LEAST_CONN = 1;
    RANDOM = 3;
  }
  oneof lb_policy {
    SimpleLBPolicy name = 1;
    //Custom policy implementations
    google.protobuf.Any custom = 2;
  }
}

// Request timeout: wait time until a response is received. Does not
// indicate the time for the entire response to arrive.
message HTTPTimeout {
  message SimpleTimeoutPolicy {
    // timeout is per attempt, when retries are specified as well.
    // seconds.nanoseconds format
    double timeout_seconds = 1;
    // Downstream service could specify timeout via Http header to the
    // proxy, if the proxy supports such a feature.
    string override_header_name = 2;
  }
  oneof timeout_policy {
    SimpleTimeoutPolicy simple_timeout = 1;
    // For proxies that support custom timeout policies
    google.protobuf.Any custom = 2;
  }
}

// Retry policy to use when a request fails.
message HTTPRetry {
  message SimpleRetryPolicy {
    // number of times the request should be retried.
    // total timeout would be attempts * timeout
    int32 attempts = 1;
    // Downstream Service could specify retry attempts via Http header to
    // the proxy, if the proxy supports such a feature.
    string override_header_name = 2;
  }
  oneof retry_policy {
    SimpleRetryPolicy simple_retry = 1;
    // For proxies that support custom retry policies
    google.protobuf.Any custom = 2;
  }
}

// TODO(rshriram) add all Envoy CB capabilities
// A minimal circuit breaker configuration.
message CircuitBreaker {
  message SimpleCircuitBreakerPolicy {
    // (for an unhealthy upstream) number of consecutive requests that
    // should succeed before the upstream is marked healthy.
    int32 success_threshold = 1;

    // (for a healthy upstream) number of consecutive requests that
    // can fail before the upstream is marked unhealthy.
    int32 failure_threshold = 2;

    // When a healthy upstream becomes unhealthy, duration to wait before
    // attempting to send requests to that upstream.
    // format seconds.nanoseconds
    double reset_timeout_seconds = 3;

    // Maximum number of connections to a backend.
    int32 max_connections = 4;

    // Maximum number of pending requests to a backend.
    int32 http_max_pending_requests = 5;

    // Maximum number of requests to a backend.
    int32 http_max_requests = 6;

    // Minimum time the circuit will be closed.
    string sleep_window = 7;

    // Number of 5XX errors before circuit is opened.
    int32 http_consecutive_errors = 8;

    // Interval for checking state of hystrix circuit.
    int32 http_detection_interval = 9;

    // Maximum number of requests per connection to a backend.
    int32 http_max_requests_per_connection = 10;
  }
  oneof cb_policy {
    SimpleCircuitBreakerPolicy simple_cb = 1;
    // For proxies that support custom circuit breaker policies.
    google.protobuf.Any custom = 2;
  }
}

// Faults can be injected into the API calls by the proxy, for testing the
// failure recovery capabilities of downstream services.  Faults include
// aborting the Http request from downstream service, delaying the proxying of
// requests, or both.
message HTTPFaultInjection {
  // Delay requests before forwarding, emulating various failures such as
  // network issues, overloaded upstream service, etc.
  Delay delay = 1;

  // Abort Http request attempts and return error codes back to downstream
  // service, giving the impression that the upstream service is faulty.
  // N.B. Both delay and abort can be specified simultaneously. Delay and
  // Abort are independent of one another. For e.g., if Delay is restricted
  // to 5% of requests while Abort is restricted to 10% of requests, the
  // 10% in abort specification applies to all requests directed to the
  // service. It may be the case that one or more requests being aborted
  // were also delayed.
  Abort abort = 2;

  // Only requests with these Http headers will be subjected to fault
  // injection
  map<string, StringMatch> headers = 3;

  // Either a fixed delay or exponential delay.
  message Delay {
    oneof http_delay_type {
      FixedDelay fixed_delay = 1;
      ExponentialDelay exp_delay = 2;
    }
    // Specify delay duration as part of Http request.
    // TODO: The semantics and syntax of the headers is undefined.
    string override_header_name = 3;
  }

  // Add a fixed delay before forwarding the request
  message FixedDelay {
    // percentage of requests on which the delay will be injected
    float percent = 1;
    // delay duration in seconds.nanoseconds
    double fixed_delay_seconds = 2;
  }

  // Add a delay (based on an exponential function) before forwarding the
  // request
  message ExponentialDelay {
    // percentage of requests on which the delay will be injected
    float percent = 1;
    // mean delay needed to derive the exponential delay values
    double mean_delay_seconds = 2;
  }

  // Abort Http request attempts and return error codes back to downstream
  // service.
  message Abort {
    // percentage of requests to be aborted with the error code provided.
    float percent = 1;
    // Error code to use to abort the Http request. Requests can be aborted
    // either with Http/1.1 status codes | http2 error codes or gRPC status
    // codes.
    oneof error_type {
      string grpc_status = 2;
      string http2_error = 3;
      int32 http_status = 4;
    }
    // Specify abort code as part of Http request.
    // TODO: The semantics and syntax of the headers is undefined.
    string override_header_name = 5;
  }
}

// Faults can be injected into the connections from downstream by the
// proxy, for testing the failure recovery capabilities of downstream
// services.  Faults include aborting the request/connection from
// downstream service, delaying the proxying of request/connection to the
// upstream service, and throttling the bandwidth of the connection
// (either end).
message L4FaultInjection {
  // Unlike Http services, we have very little context for raw Tcp|Udp
  // connections. We could throttle bandwidth of the connections (slow down
  // the connection) and/or abruptly reset (terminate) the Tcp connection
  // after it has been established.

  // We first throttle (if set) and then terminate the connection.
  Throttle throttle = 1;
  Terminate terminate = 2;

 // Bandwidth throttling for Tcp and Udp connections
  message Throttle {
    // percentage of connections to throttle.
    float percent = 1;
    // bandwidth limit in "bits" per second between downstream and proxy
    int64 downstream_limit_bps = 2;
    // bandwidth limits in "bits" per second between proxy and upstream
    int64 upstream_limit_bps = 3;

    oneof throttle_after {
      // Wait for X seconds after the connection is established, before
      // starting bandwidth throttling. This would allow us to inject fault
      // after the application protocol (e.g., MySQL) has had time to
      // establish sessions/whatever handshake necessary.
      double throttle_after_seconds = 4;

      // Alternatively, we could wait for a certain number of bytes to be
      // transferred to upstream before throttling the bandwidth.
      double throttle_after_bytes = 5;
    }

    // Stop throttling after the given duration. If not set, the connection
    // will be throttled for its lifetime.
    google.protobuf.DoubleValue throttle_for_seconds = 6;
  }

  // Abruptly reset (terminate) the Tcp connection after it has been
  // established, emulating remote server crash or link failure.
  message Terminate {
    // percentage of established Tcp connections to be terminated/reset
    float percent = 1;

    // Wait for X seconds after the connection is established, before
    // terminating the connection. Set to 0 to terminate immediately on
    // connection establishment.

    // TODO: see if it makes sense to create a generic Duration type to
    // express time interval related configs.
    double terminate_after_seconds = 2;
  }
}
